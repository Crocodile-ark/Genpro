package types

import (
	"context"

	"github.com/cosmos/cosmos-sdk/client"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"
)

// QueryServer defines the gRPC querier service for the halving module.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	HalvingInfo(context.Context, *QueryHalvingInfoRequest) (*QueryHalvingInfoResponse, error)
	DistributionHistory(context.Context, *QueryDistributionHistoryRequest) (*QueryDistributionHistoryResponse, error)
}

// QueryClient defines the gRPC querier client for the halving module.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	HalvingInfo(ctx context.Context, in *QueryHalvingInfoRequest, opts ...grpc.CallOption) (*QueryHalvingInfoResponse, error)
	DistributionHistory(ctx context.Context, in *QueryDistributionHistoryRequest, opts ...grpc.CallOption) (*QueryDistributionHistoryResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

// NewQueryClient creates a new QueryClient
func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/gxr.halving.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HalvingInfo(ctx context.Context, in *QueryHalvingInfoRequest, opts ...grpc.CallOption) (*QueryHalvingInfoResponse, error) {
	out := new(QueryHalvingInfoResponse)
	err := c.cc.Invoke(ctx, "/gxr.halving.v1beta1.Query/HalvingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DistributionHistory(ctx context.Context, in *QueryDistributionHistoryRequest, opts ...grpc.CallOption) (*QueryDistributionHistoryResponse, error) {
	out := new(QueryDistributionHistoryResponse)
	err := c.cc.Invoke(ctx, "/gxr.halving.v1beta1.Query/DistributionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterQueryServer registers the halving query server
func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

// RegisterQueryHandlerClient registers the halving query handler client
func RegisterQueryHandlerClient(ctx context.Context, mux *runtime.ServeMux, client QueryClient) error {
	return RegisterQueryHandlerFromEndpoint(ctx, mux, "", client)
}

// RegisterQueryHandlerFromEndpoint is a placeholder for gateway registration
func RegisterQueryHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, client interface{}) error {
	// This would normally be generated by protoc
	// For now, we'll provide a minimal implementation
	return nil
}

// Query_ServiceDesc is the grpc service descriptor for Query service.
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gxr.halving.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "HalvingInfo",
			Handler:    _Query_HalvingInfo_Handler,
		},
		{
			MethodName: "DistributionHistory",
			Handler:    _Query_DistributionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gxr/halving/v1beta1/query.proto",
}

// Handler functions (normally generated by protoc)
func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gxr.halving.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HalvingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHalvingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HalvingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gxr.halving.v1beta1.Query/HalvingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HalvingInfo(ctx, req.(*QueryHalvingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DistributionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDistributionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DistributionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gxr.halving.v1beta1.Query/DistributionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DistributionHistory(ctx, req.(*QueryDistributionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}